#!/usr/bin/env bash
############################
# k8s 工具集
############################

############参数###########
# 动作名称
action=$1

# 参数1
param01=$2

# 参数2
param02=$3

# 命名空间
nameSpace=${K1S_NS}

# 存储yaml路径,带 / 结尾
savePath=${K1S_PATH}

###########################

############内置函数#############


# 判断结果状态
alert() {
    local val=$1
    if [ $? -eq 0 ];then     
        echo -e "\033[32m ${val} 成功 \033[0m"
    else
        echo -e "\033[31m ${val} 失败 \033[0m"
    fi
}
# 提示
green() {
    local val=$1
    echo -e "\033[32m ${val} \033[0m"
}
# 禁止
red() {
    local val=$1
    echo -e "\033[31m ${val} \033[0m"
}
# 警告
yello() {
    local val=$1
    echo -e "\033[33m ${val} \033[0m"
}

blue() {
    local val=$1
    echo -e "\033[34m ${val} \033[0m"
}


help() {
    scriptName=$0
    scriptName=$(basename "${scriptName}")
    local tools=(
"开始部署:              ${scriptName} apply {资源名称}"
"重新部署:              ${scriptName} reapply {资源名称}"
"查看 node 列表:        ${scriptName} node|nodes|n|ns"
"查看 node 标签:        ${scriptName} label|labels|l|ls"
"查看 deploy 列表:      ${scriptName} deploy|deploys|dep|deps|d {资源名称}"
"查看 pod 列表:         ${scriptName} pod|pods|p|ps {资源名称} [监听(w)]"
"查看 service 列表:     ${scriptName} svc|svcs|s|ss {资源名称}"    
"查看 endpoints 列表:   ${scriptName} ep|eps {资源名称}"    
"查看 daemonsets 列表:  ${scriptName} ds|dss {资源名称}"    
"查看 node 详情:        ${scriptName} desc-node|desc-nodes|dn|dns {资源名称}"    
"查看 deploy 详情:      ${scriptName} desc-deploy|dd|dds {资源名称}"
"查看 pod 详情:         ${scriptName} desc-pod|dp|dps {资源名称}"
"查看 endpoints 详情:   ${scriptName} desc-ep|de|des {资源名称}"
"查看 daemonsets 详情:  ${scriptName} desc-ds|desc-dds {资源名称}"
"查看 pod YAML:         ${scriptName} yaml-pod|yp {资源名称}"
"查看 deploy YAML:      ${scriptName} yaml-deploy|yd {资源名称}"
"查看 service YAML:     ${scriptName} yaml-svc|ys {资源名称}"
"进入 pod 容器:         ${scriptName} exec {POD名称}"  
"自动进入 pod 容器:     ${scriptName} auto {资源名称}"    
"查看 pod 日志:         ${scriptName} logs {POD名称}"    
"监听 pod 日志:         ${scriptName} logsf {POD名称}"    
"查看 all:              ${scriptName} all {资源名称}"
"导出 Deploy YAML:      ${scriptName} ex-deploy|ed {资源名称}"
"导出 Service YAML:     ${scriptName} ex-svc|es {资源名称}"
"删除 pod 资源:         ${scriptName} rm-pod|rmp {资源名称}"
"删除 deploy 应用:      ${scriptName} rm-deploy|rmd {资源名称}"
"清理垃圾:              ${scriptName} clean|c {空间名称}"
"查看帮助：             ${scriptName} help|h"
)
    local tips=(
"1. 设置YAML路径的环境变量方式：export K1S_NS=/home/test/ (必须/结尾)"
"2. 设置命名空间的环境变量方式：export K1S_PATH=dev"
    )
    local envs=(
"1. 当前操作的路径：${savePath}"
"2. 当前操作的空间名：${nameSpace}"
    )
    cat <<EOF
     __    ____        
|  | _/_   | ______
|  |/ /|   |/  ___/
|    < |   |\___ \ 
|__|_ \|___/____  >
     \/         \/  by 百里(github.com/yezihack)

EOF
    local i=0
    for name in "${tools[@]}"
    do 
        ((i++)) # 自增
        if [[ ${i} -le 9 ]];then
            inc="0${i}"
        else 
            inc=${i}
        fi
        blue "${inc}. ${name}"
    done
    echo "TIP:"
    for name in "${tips[@]}"
    do 
        green "${name}"
    done
    echo "CURRENT:"
    for name in "${envs[@]}"
    do 
        yello "${name}"
    done
}

tip() {
    local envs=(
"1. 当前操作的路径：${savePath}"
"2. 当前操作的空间名：${nameSpace}"
    )
    for name in "${tips[@]}"
    do 
        green "${name}"
    done   
}

# 是否继续函数
IsContinue() {
    local msg=$1
    while true
    do
        read -p "${msg}" ok
        case "${ok}" in 
            [Yy])
                break
            ;;
            [Nn])
                echo "安全退出"
                exit 0
            ;;
        esac
    done
}

# 用于YES还是NO，YES返回0，NO返回1
IsYesNo() {
    local msg=$1
    while true
    do
        read -p "${msg}" ok
        case "${ok}" in 
            [Yy])
                return 0
            ;;
            [Nn])
                return 1
            ;;
        esac
    done
}

# 判断当前 kubectl 是否小于1.18版本。返回 1则大于等于1.18，0则小于1.18
IsGtK8sVersion118() {
    version=$(kubectl version|sed -r "s/.*(v[0-9]+\.[0-9]+\.[0-9]+).*/\1/g"|sed -n '1p')
    versionNumber=$(echo "${version}"|sed -r "s/[v\.]//g")
    if [ "${versionNumber}" -ge 1180 ];then 
        return 1
    fi
    return 0
}

#########################
check() {
     # 0. 检查
    ## 检查设置路径
    if [ -z "${savePath}" ]; then 
        red "请设置的YAML路径的环境变量！"
        exit 1
    fi 

    ## 路径是否有效
    if [ ! -d "${savePath}" ]; then 
        red "${savePath} 路径不存在，请检查"
        exit 1
    fi 

    green "当前设置的YAML路径: ${savePath}"

    ## 检查输入参数
    if [ -z "${param01}" ]; then 
        red "请输入您的应用名称！"
        exit 1
    fi 

    ## 检查应用文件是否存在
    fullFile="${savePath}${param01}.yaml"
    if [ ! -f "${fullFile}" ];then
        red "${fullFile} 文件不存在，请检查"
        exit 1
    fi 
}
# 新部署
apply() {
    yello "############ 正在操作新部署 ###############"
    tip
    check

    kubectl get -f "${fullFile}" &> /dev/null
    if [ $? -eq 0 ]; then
        red "${param01} 不是新应用，请检查后使用 reapply 方式部署。"
        exit 1
    fi 

    IsContinue "是否准备好新应用部署：${param01}(Y/N):"

    # 模拟运行是否可行
    IsGtK8sVersion118
    if [ $? -eq 1 ]; then 
        kubectl apply -f "${fullFile}" --dry-run=server
    else 
        kubectl apply -f "${fullFile}" --server-dry-run
    fi 
    
    alert "模拟运行"

    # 真实运行
    IsContinue "您正在准备运行部署应用名为:${param01},是否确认(Y/N):"
    kubectl apply -f "${fullFile}"

     # 5. 观察应用状态
    kubectl get -f "${fullFile}"

    # 6. 查看应用详情
    IsContinue "是否查看应用:${param01} 的部署详情(Y/N):"
    kubectl describe -f "${fullFile}"
}
# 重新部署
reapply() {    
    yello "############ 正在操作重新部署 ###############"
    tip
    check

    kubectl get -f "${fullFile}" &> /dev/null
    if [ $? -eq 1 ]; then
        red "${param01} 是新应用，请检查后使用 apply 方式部署。"
        exit 1
    fi 

    IsContinue "是否准备好重新部署应用：${param01}(Y/N):"

    # 1. 查看应用
    kubectl get -f "${fullFile}"

    # 2. 对比应用变化
    kubectl diff -f "${fullFile}"

    # 2.1 查看 pods 详情
    kubectl get pods -n "${nameSpace}" -o wide |grep "${param01}"
    IsContinue "请仔细观察应用的差异，然后决定是否继续(Y/N):"

    # 3. 模拟运行是否可行
    IsGtK8sVersion118
    if [ $? -eq 1 ]; then 
        kubectl apply -f "${fullFile}" --dry-run=server
    else 
        kubectl apply -f "${fullFile}" --server-dry-run
    fi 
    alert "模拟运行"

    # 4. 真实运行
    IsContinue "您正在准备运行部署应用名为:${param01},是否确认(Y/N):"
    kubectl apply -f "${fullFile}"

    # 5. 观察应用状态
    kubectl get -f "${fullFile}" -o wide

    # 6. 查看应用详情
    IsYesNo "是否查看应用:${param01} 的部署详情(Y/N):"
    if [ $? -eq 0 ]; then 
        kubectl describe -f "${fullFile}"
    fi

    # 7. 查看 pods 
    IsYesNo "是否查看应用:${param01} 的 POD 详情(Y/N):"
    if [ $? -eq 0 ]; then 
        kubectl get pods -n "${nameSpace}" -o wide |grep "${param01}"
    fi
    
}
# 获取应用时的检查
checkns() {
    # 检查命名空间
    if [ -z "${nameSpace}" ];then 
        red "请设置命名空间环境变量, 查看帮助:help"
    fi
}
getcheck() {
     ## 检查输入参数
    if [ -z "${param01}" ]; then 
        red "请输入您的名称参数！"
        exit 1
    fi 
   checkns
}
# 查看 deploy
deploy() {
    yello "############ 查看 deploy ###############"
    tip
    checkns
    kubectl get deploy -n "${nameSpace}" ${param01}
}

# 查看 deploy
deploys() {
    yello "############ 查看 deploy ###############"
    tip
    checkns
    kubectl get deploy -n "${nameSpace}" ${param01} -o wide
}

# 查看 pods
pod() {
    yello "############ 查看 pod ###############"
    tip
    checkns
    if [ -n "${param01}" ];then 
        if [ -n "${param02}" ] && [ "${param02}" = "w" ]; then 
            green "正在监听 <${param01}> 应用:"
            kubectl get pods -n "${nameSpace}" -w |grep "${param01}"
        else 
            kubectl get pods -n "${nameSpace}" |grep "${param01}"
        fi 
        
    else
        kubectl get pods -n "${nameSpace}"        
    fi    
}
# 查看 pods
pods() {
    yello "############ 查看 pod ###############"
    tip
    checkns
    if [ -n "${param01}" ];then 
        if [ -n "${param02}" ] && [ "${param02}" = "w" ]; then 
            green "正在监听 <${param01}> 应用:"
            kubectl get pods -n "${nameSpace}" -w -o wide |grep "${param01}"
        else 
            kubectl get pods -n "${nameSpace}" -o wide |grep "${param01}"
        fi
        
    else
        kubectl get pods -n "${nameSpace}" -o wide        
    fi    
}
# 查看 service
svc() {
    yello "############ 查看 service ###############"
    tip
    checkns
    kubectl get svc -n "${nameSpace}" ${param01}
}

# 查看 service
svcs() {
    yello "############ 查看 service ###############"
    tip
    checkns
    kubectl get svc -n "${nameSpace}" ${param01} -o wide
}
# 详情查看 deploy
descDeploy() {
    yello "############ 查看 deploy 详情 ###############"
    tip
    getcheck
    kubectl describe deploy -n "${nameSpace}" "${param01}"
}
# 详情查看pods
descPod() {
    yello "############ 查看 pod 详情 ###############"
    tip
    getcheck
    kubectl describe pod -n "${nameSpace}" "${param01}"
}
# 查看 endpoints 列表
endpoints() {
    yello "############ 查看 endpoints 列表 ###############"
    tip
    checkns
    if [ -n "${param01}" ];then
        kubectl -n "${nameSpace}" get endpoints "${param01}"
    else 
        kubectl -n "${nameSpace}" get endpoints
    fi
    
}

# 查看 endpoints 详情
descEndpoints() {
    yello "############ 查看 endpoints 详情 ###############"
    tip
    getcheck
    kubectl -n "${nameSpace}" describe endpoints "${param01}"
}

# 查看 daemonsets 列表
daemonsets() {
    yello "############ 查看 daemonsets 列表 ###############"
    tip
    checkns
    if [ -n "${param01}" ];then
        kubectl -n "${nameSpace}" get ds "${param01}"
    else 
        kubectl -n "${nameSpace}" get ds
    fi 
}
# 查看 daemonsets 列表
daemonsetsWide() {
    yello "############ 查看 daemonsets 列表 ###############"
    tip
    checkns
    if [ -n "${param01}" ];then
        kubectl -n "${nameSpace}" get ds "${param01}" -o wide
    else 
        kubectl -n "${nameSpace}" get ds -o wide
    fi 
}

# 查看 daemonsets 详情
descDaemonsets() {
    yello "############ 查看 daemonsets 详情 ###############"
    tip
    getcheck
    kubectl -n "${nameSpace}" describe ds "${param01}"
}
# 进入容器
execPod() {
    yello "############ 进入 ${param01} pod 容器 ###############"
    tip
    getcheck
    kubectl exec -it -n "${nameSpace}" "${param01}" bash
}

# 自动进入容器
autoExecPod() {
    yello "############ 进入 ${param01} pod 容器 ###############"
    tip
    getcheck
    # 从名称中自动获取 pod 名称
    podsName=$(kubectl get pods -n "${nameSpace}" |grep "${param01}" |sed -n '1p'|awk '{print $1}')
    if [ -z "${podsName}" ];then 
        red "获取 POD 名称失败，请检查或使用 exec-pod 方式。"
        exit 1
    fi 
    green "自动获取第一个POD名称：${podsName}"
    kubectl exec -it -n "${nameSpace}" "${podsName}" bash
    # 如果出错的话，尝试另一种方式
    if [ $? -ne 0 ];then 
        green "bash 方式失败，正在尝试 sh 方式进入容器："
        kubectl exec -it -n "${nameSpace}" "${podsName}" sh
    fi 
}
# 查看pod 日志
logsPod() {
    yello "############ 查看 ${param01} pod 日志 ###############"
    tip
    getcheck
    kubectl logs -n "${nameSpace}" "${param01}"
}
# 动态查看日志
logsFpod() {
    yello "############ 动态监听 ${param01} pod 日志 ###############"
    tip
    getcheck
    kubectl logs -f -n "${nameSpace}" "${param01}"
}
# 导出 Deploy YAML
exportDeploy() {
    tip
    checkns
    if [ -n "${param01}" ];then 
        yello "############ 导出应用 DEPLOY ${param01} ###############"
        # 判断应用是否存在
        count=$(kubectl get deploy -n "${nameSpace}"|grep "${param01}"|wc -l)
        if [ "${count}" -eq 0 ];then 
            red "${param01} 应用不存在，请检查！"
            exit 0
        fi 
        # 判断应用文件是否存在
        deployFile="${param01}.yaml"
        if [ -d "${savePath}" ];then
            deployFile="${savePath}${param01}.yaml"
        fi  
        if [ -f "${deployFile}" ]; then 
            IsContinue "${deployFile} 文件存在，是否需要覆盖(Y/N):"
        fi 
        # 导出文件
        kubectl get deploy -n "${nameSpace}" "${param01}" -o yaml > "${deployFile}"
        alert "${deployFile} 应用导出"
        exit 0
    fi 

    yello "############ 导出应用 DEPLOY (Many)  ###############"
    # 获取应用列表
    for deployName in $(kubectl get deploy -n "${nameSpace}" |awk '{print $1}'|sed '1d')
    do 
        yello "正在导出 ${deployName} 应用..."
        deployFile="${deployName}.yaml"
        if [ -d "${savePath}" ];then
            deployFile="${savePath}${deployName}.yaml"
        fi  
        # 判断应用文件是否曾导出过
        if [ -f "${deployFile}" ]; then 
            IsYesNo "${deployFile} 文件存在，是否需要覆盖(Y/N):"
            if [ $? -eq 1 ]; then 
                yello "${deployFile} 跳过不重新生成"
                continue
            fi 
        fi 
        # 导出操作
        kubectl get deploy -n "${nameSpace}" "${deployName}" -o yaml > "${deployFile}"
        alert "导出"
    done 
}
# 导出 service
exportService() {
    tip
    checkns
    if [ -n "${param01}" ];then 
        yello "############ 导出应用 SERVICE ${param01} ###############"
        # 判断应用是否存在
        count=$(kubectl get svc -n "${nameSpace}"|grep "${param01}"|wc -l)
        if [ "${count}" -eq 0 ];then 
            red "${param01} service 不存在，请检查！"
            exit 0
        fi 
        # 判断 svc 文件是否存在
        svcfile="${param01}-svc.yaml"
        if [ -d "${savePath}" ];then
            svcfile="${savePath}${svcfile}"
        fi  
        if [ -f "${svcfile}" ]; then 
            IsContinue "${svcfile} 文件存在，是否需要覆盖(Y/N):"
        fi 
        # 导出文件
        kubectl get deploy -n "${nameSpace}" "${param01}" -o yaml > "${deployFile}"
        alert "${deployFile} 应用导出"
        exit 0
    fi 

    yello "############ 导出应用 DEPLOY (Many)  ###############"
    # 获取应用列表
    for deployName in $(kubectl get deploy -n "${nameSpace}" |awk '{print $1}'|sed '1d')
    do 
        yello "正在导出 ${deployName} 应用..."
        deployFile="${deployName}.yaml"
        if [ -d "${savePath}" ];then
            deployFile="${savePath}${deployName}.yaml"
        fi  
        # 判断应用文件是否曾导出过
        if [ -f "${deployFile}" ]; then 
            IsYesNo "${deployFile} 文件存在，是否需要覆盖(Y/N):"
            if [ $? -eq 1 ]; then 
                yello "${deployFile} 跳过不重新生成"
                continue
            fi 
        fi 
        # 导出操作
        kubectl get deploy -n "${nameSpace}" "${deployName}" -o yaml > "${deployFile}"
        alert "导出"
    done 
}

# 查看 nodes 机器列表
node() {
    yello "############ 查看 node 列表 ###############"
    tip
    if [ -n "${param01}" ];then 
        kubectl get nodes "${param01}"
    else 
        kubectl get nodes
    fi
}

# 查看 nodes 机器列表
nodes() {
    yello "############ 查看 node 列表 ###############"
    tip
    if [ -n "${param01}" ];then 
        kubectl get nodes "${param01}" -o wide
    else 
        kubectl get nodes -o wide
    fi
}

# 查看 node 详情
descNode() {
    yello "############ 查看 ${param01} node 详情 ###############"
    tip
    getcheck
    kubectl describe nodes "${param01}"
}

# 查看 node 标签
nodeLabel() {
    yello "############ 查看 node 标签 ###############"
    tip
    if [ -n "${param01}" ];then 
        kubectl get node "${param01}" --show-labels
    else 
        kubectl get node --show-labels
    fi
}
# 查看 pod yaml
yamlPod() {
    yello "############ 查看 pods YAML ###############"
    tip
    checkns
    if [ -n "${param01}" ];then 
        kubectl -n "${nameSpace}" get pods "${param01}" -o yaml
    else 
        kubectl -n "${nameSpace}" get pods -o yaml
    fi
}

# 查看 pod yaml
yamlDeploy() {
    yello "############ 查看 deploy YAML ###############"
    tip
    checkns
    if [ -n "${param01}" ];then 
        kubectl -n "${nameSpace}" get deploy "${param01}" -o yaml
    else 
        kubectl -n "${nameSpace}" get deploy -o yaml
    fi
}

# 查看 pod yaml
yamlService() {
    yello "############ 查看 service YAML ###############"
    tip
    checkns
    if [ -n "${param01}" ];then 
        kubectl -n "${nameSpace}" get svc "${param01}" -o yaml
    else 
        kubectl -n "${nameSpace}" get svc -o yaml
    fi
}

# 监听 pods 创建变化
watchPods() {
    yello "############ 正在监听 ${param01} pods 变化 ###############"
    tip
    checkns
    if [ -n "${param01}" ];then 
        kubectl -n "${nameSpace}" get pods -w |grep "${param01}"
    else 
        kubectl -n "${nameSpace}" get pods -w
    fi
}

# 删除 pods 
removePods() {
    yello "############ 正在删除 pods 操作！！！ ###############"
    tip
    checkns
    getcheck
    # 先判断输入的名称是否存在
    count=$(kubectl -n "${nameSpace}" get pods |grep "${param01}"|wc -l)
    if [ ${count} -eq 0 ];then 
        red "POD名称：<${param01}> 不存在，请检查！！！"
        exit 0
    fi    
    
    # 存在则提醒是否需要继续删除操作
    IsYesNo "确定要删除 <${param01}> POD名称吗？"
    if [ $? -eq 0 ];then 
        red "正在删除..."
        kubectl -n "${nameSpace}" delete pods "${param01}"
    else 
        green "取消删除操作!"
    fi
}

# 删除 deploy 
removeDeploy() {
    red "############ 正在删除 deploy 操作！！！ ###############"
    tip
    checkns
    getcheck
    # 先判断输入的名称是否存在
    count=$(kubectl -n "${nameSpace}" get deploy |grep "${param01}"|wc -l)
    if [ ${count} -eq 0 ];then 
        red "Deploy名称: <${param01}> 不存在，请检查！！！"
        exit 0
    fi    
    
    # 存在则提醒是否需要继续删除操作
    IsYesNo "确定要删除 <${param01}> Deploy 名称吗？"
    if [ $? -eq 0 ];then 
        red "正在删除..."
        kubectl -n "${nameSpace}" delete deploy "${param01}"
    else 
        green "取消删除操作!"
    fi
}

# 清理垃圾
clean() {
    if [ -n "${param01}" ];then 
        local errMsg="UnexpectedAdmissionError"
        IsYesNo "是否查找 ${errMsg} 错误的POD，确认(Y/N):"
        if [ $? -eq 0 ]; then 
            local count=$(kubectl get pods -n "${param01}"|grep "${errMsg}"|wc -l)
            if [ ${count} -gt 0 ];then 
                IsYesNo "空间：${param01}，错误：${errMsg}，共: ${count} 条数，是否需要清理(Y/N):"
                if [ $? -eq 0 ]; then 
                    green "开始清理..."
                    local i=0
                    for errPodsName in $(kubectl get pods -n "${param01}"|grep "${errMsg}"|awk '{print $1}')
                    do                         
                        let i++
                        red "正在处理: ${i}/${count} ${errPodsName}"
                        kubectl delete pods -n "${param01}" "${errPodsName}"
                    done
                fi 
            else 
                green "空间：${param01}，错误：${errMsg}，共: 0 条数"
            fi 
        fi 
    else 
        local errMsg="UnexpectedAdmissionError"
        IsYesNo "查找所有空间下的 ${errMsg} 错误的 POD,确认(Y/N):"
        if [ $? -eq 0 ]; then 
            green "正在统计不同空间下的 ${errMsg} 数据："
            kubectl get pods -A |grep "${errMsg}"|awk '{print $1}'|uniq -c
        fi 
    fi
}

## 分类操作

case "X${action}" 
in    
    "Xapply")
        apply
    ;;
    "Xreapply")
        reapply
    ;;
    "Xnode"|"Xn")
        node
    ;;
    "Xnodes"|"Xns")
        nodes
    ;;
    "Xlabel"|"Xlabels"|"Xl"|"Xls")
        nodeLabel
    ;;
    "Xdeploy"|"Xdep"|"Xd")
        deploy
    ;;
    "Xdeploys"|"Xdeps")
        deploys
    ;;
    "Xpod"|"Xp")
        pod
    ;;
    "Xpods"|"Xps")
        pods
    ;;
    "Xsvc"|"Xs")
        svc
    ;;
    "Xsvcs"|"Xss")
        svcs
    ;;
    "Xep"|"Xeps")
        endpoints
    ;;
    "Xds")
        daemonsets
    ;;
    "Xdss")
        daemonsetsWide
    ;;
    "Xdesc-node"|"Xdesc-nodes"|"Xdn"|"Xdns")
        descNode
    ;;
    "Xdesc-deploy"|"Xdesc-deploys"|"Xdd"|"Xdds")
        descDeploy
    ;;
    "Xdesc-pod"|"Xdesc-pods"|"Xdp"|"Xdps")
        descPod
    ;;
    "Xdesc-ep"|"Xdesc-eps"|"Xde"|"Xdes")
        descEndpoints
    ;;    
    "Xdesc-ds"|"Xdesc-dss")
        descDaemonsets
    ;;    
    "Xyaml-pod"|"Xyaml-pods"|"Xyp"|"Xyps")
        yamlPod
    ;; 
    "Xyaml-deploy"|"Xyaml-dep"|"Xyd")
        yamlDeploy
    ;; 
    "Xyaml-svc"|"Xyaml-service"|"Xys")
        yamlService
    ;; 
    "Xexec")
        execPod
    ;; 
    "Xauto")
        autoExecPod
    ;;
    "Xlogs")
        logsPod
    ;;
    "Xlogsf")
        logsFpod
    ;;
    "Xall")
        deploy
        pod
        svc
    ;;
    "Xex-deploy"|"Xed")
        exportDeploy
    ;;
    "Xex-svc"|"Xex-serivce"|"Xes"|"Xess")
        exportService
    ;;
    "Xrm-pod"|"Xrm-pods"|"Xrmp")
        removePods
    ;;
    "Xrm-deploy"|"Xrmd")
        removeDeploy
    ;;
    "Xclean"|"Xc")
        clean
    ;;
    *)
        help
    ;;
esac